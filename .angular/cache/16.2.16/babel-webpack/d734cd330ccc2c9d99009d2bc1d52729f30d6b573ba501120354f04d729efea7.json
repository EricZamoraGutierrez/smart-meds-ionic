{"ast":null,"code":"import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, NgZone, Injector } from '@angular/core';\nimport { AuthInstances } from '@angular/fire/auth';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { AppCheckInstances } from '@angular/fire/app-check';\nimport { fromRef as fromRef$1, stateChanges as stateChanges$1, list as list$1, listVal as listVal$1, auditTrail as auditTrail$1, object as object$1, objectVal as objectVal$1, changeToData as changeToData$1 } from 'rxfire/database';\nexport { ListenEvent, ListenerMethods } from 'rxfire/database';\nimport { child as child$1, connectDatabaseEmulator as connectDatabaseEmulator$1, enableLogging as enableLogging$1, endAt as endAt$1, endBefore as endBefore$1, equalTo as equalTo$1, forceLongPolling as forceLongPolling$1, forceWebSockets as forceWebSockets$1, get as get$1, getDatabase as getDatabase$1, goOffline as goOffline$1, goOnline as goOnline$1, increment as increment$1, limitToFirst as limitToFirst$1, limitToLast as limitToLast$1, off as off$1, onChildAdded as onChildAdded$1, onChildChanged as onChildChanged$1, onChildMoved as onChildMoved$1, onChildRemoved as onChildRemoved$1, onDisconnect as onDisconnect$1, onValue as onValue$1, orderByChild as orderByChild$1, orderByKey as orderByKey$1, orderByPriority as orderByPriority$1, orderByValue as orderByValue$1, push as push$1, query as query$1, ref as ref$1, refFromURL as refFromURL$1, remove as remove$1, runTransaction as runTransaction$1, serverTimestamp as serverTimestamp$1, set as set$1, setPriority as setPriority$1, setWithPriority as setWithPriority$1, startAfter as startAfter$1, startAt as startAt$1, update as update$1 } from 'firebase/database';\nexport * from 'firebase/database';\nclass Database {\n  constructor(database) {\n    return database;\n  }\n}\nconst DATABASE_PROVIDER_NAME = 'database';\nclass DatabaseInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(DATABASE_PROVIDER_NAME);\n  }\n}\nconst databaseInstance$ = /*#__PURE__*/ /*#__PURE__*/timer(0, 300).pipe( /*#__PURE__*/concatMap(() => from(ɵgetAllInstancesOf(DATABASE_PROVIDER_NAME))), /*#__PURE__*/distinct());\nconst PROVIDED_DATABASE_INSTANCES = /*#__PURE__*/new InjectionToken('angularfire2.database-instances');\nfunction defaultDatabaseInstanceFactory(provided, defaultApp) {\n  const defaultDatabase = ɵgetDefaultInstanceOf(DATABASE_PROVIDER_NAME, provided, defaultApp);\n  return defaultDatabase && new Database(defaultDatabase);\n}\nfunction databaseInstanceFactory(fn) {\n  return (zone, injector) => {\n    const database = zone.runOutsideAngular(() => fn(injector));\n    return new Database(database);\n  };\n}\nconst DATABASE_INSTANCES_PROVIDER = {\n  provide: DatabaseInstances,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_DATABASE_INSTANCES]]\n};\nconst DEFAULT_DATABASE_INSTANCE_PROVIDER = {\n  provide: Database,\n  useFactory: defaultDatabaseInstanceFactory,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_DATABASE_INSTANCES], FirebaseApp]\n};\nlet DatabaseModule = /*#__PURE__*/(() => {\n  class DatabaseModule {\n    constructor() {\n      registerVersion('angularfire', VERSION.full, 'rtdb');\n    }\n  }\n  DatabaseModule.ɵfac = function DatabaseModule_Factory(t) {\n    return new (t || DatabaseModule)();\n  };\n  DatabaseModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: DatabaseModule\n  });\n  DatabaseModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_DATABASE_INSTANCE_PROVIDER, DATABASE_INSTANCES_PROVIDER]\n  });\n  return DatabaseModule;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction provideDatabase(fn, ...deps) {\n  return {\n    ngModule: DatabaseModule,\n    providers: [{\n      provide: PROVIDED_DATABASE_INSTANCES,\n      useFactory: databaseInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps,\n      // Database+Auth work better if Auth is loaded first\n      [new Optional(), AuthInstances], [new Optional(), AppCheckInstances], ...deps]\n    }]\n  };\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst fromRef = /*#__PURE__*/ɵzoneWrap(fromRef$1, true);\nconst stateChanges = /*#__PURE__*/ɵzoneWrap(stateChanges$1, true);\nconst list = /*#__PURE__*/ɵzoneWrap(list$1, true);\nconst listVal = /*#__PURE__*/ɵzoneWrap(listVal$1, true);\nconst auditTrail = /*#__PURE__*/ɵzoneWrap(auditTrail$1, true);\nconst object = /*#__PURE__*/ɵzoneWrap(object$1, true);\nconst objectVal = /*#__PURE__*/ɵzoneWrap(objectVal$1, true);\nconst changeToData = /*#__PURE__*/ɵzoneWrap(changeToData$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst child = /*#__PURE__*/ɵzoneWrap(child$1, true);\nconst connectDatabaseEmulator = /*#__PURE__*/ɵzoneWrap(connectDatabaseEmulator$1, true);\nconst enableLogging = /*#__PURE__*/ɵzoneWrap(enableLogging$1, true);\nconst endAt = /*#__PURE__*/ɵzoneWrap(endAt$1, true);\nconst endBefore = /*#__PURE__*/ɵzoneWrap(endBefore$1, true);\nconst equalTo = /*#__PURE__*/ɵzoneWrap(equalTo$1, true);\nconst forceLongPolling = /*#__PURE__*/ɵzoneWrap(forceLongPolling$1, true);\nconst forceWebSockets = /*#__PURE__*/ɵzoneWrap(forceWebSockets$1, true);\nconst get = /*#__PURE__*/ɵzoneWrap(get$1, true);\nconst getDatabase = /*#__PURE__*/ɵzoneWrap(getDatabase$1, true);\nconst goOffline = /*#__PURE__*/ɵzoneWrap(goOffline$1, true);\nconst goOnline = /*#__PURE__*/ɵzoneWrap(goOnline$1, true);\nconst increment = /*#__PURE__*/ɵzoneWrap(increment$1, true);\nconst limitToFirst = /*#__PURE__*/ɵzoneWrap(limitToFirst$1, true);\nconst limitToLast = /*#__PURE__*/ɵzoneWrap(limitToLast$1, true);\nconst off = /*#__PURE__*/ɵzoneWrap(off$1, true);\nconst onChildAdded = /*#__PURE__*/ɵzoneWrap(onChildAdded$1, true);\nconst onChildChanged = /*#__PURE__*/ɵzoneWrap(onChildChanged$1, true);\nconst onChildMoved = /*#__PURE__*/ɵzoneWrap(onChildMoved$1, true);\nconst onChildRemoved = /*#__PURE__*/ɵzoneWrap(onChildRemoved$1, true);\nconst onDisconnect = /*#__PURE__*/ɵzoneWrap(onDisconnect$1, true);\nconst onValue = /*#__PURE__*/ɵzoneWrap(onValue$1, true);\nconst orderByChild = /*#__PURE__*/ɵzoneWrap(orderByChild$1, true);\nconst orderByKey = /*#__PURE__*/ɵzoneWrap(orderByKey$1, true);\nconst orderByPriority = /*#__PURE__*/ɵzoneWrap(orderByPriority$1, true);\nconst orderByValue = /*#__PURE__*/ɵzoneWrap(orderByValue$1, true);\nconst push = /*#__PURE__*/ɵzoneWrap(push$1, true);\nconst query = /*#__PURE__*/ɵzoneWrap(query$1, true);\nconst ref = /*#__PURE__*/ɵzoneWrap(ref$1, true);\nconst refFromURL = /*#__PURE__*/ɵzoneWrap(refFromURL$1, true);\nconst remove = /*#__PURE__*/ɵzoneWrap(remove$1, true);\nconst runTransaction = /*#__PURE__*/ɵzoneWrap(runTransaction$1, true);\nconst serverTimestamp = /*#__PURE__*/ɵzoneWrap(serverTimestamp$1, true);\nconst set = /*#__PURE__*/ɵzoneWrap(set$1, true);\nconst setPriority = /*#__PURE__*/ɵzoneWrap(setPriority$1, true);\nconst setWithPriority = /*#__PURE__*/ɵzoneWrap(setWithPriority$1, true);\nconst startAfter = /*#__PURE__*/ɵzoneWrap(startAfter$1, true);\nconst startAt = /*#__PURE__*/ɵzoneWrap(startAt$1, true);\nconst update = /*#__PURE__*/ɵzoneWrap(update$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Database, DatabaseInstances, DatabaseModule, auditTrail, changeToData, child, connectDatabaseEmulator, databaseInstance$, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, fromRef, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, list, listVal, object, objectVal, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, provideDatabase, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, stateChanges, update };\n//# sourceMappingURL=angular-fire-database.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}