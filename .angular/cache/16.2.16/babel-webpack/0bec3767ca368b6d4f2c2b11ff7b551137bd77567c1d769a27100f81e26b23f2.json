{"ast":null,"code":"import _asyncToGenerator from \"c:/Users/benji/OneDrive/Documents/smartmeds project/smart-meds-ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Validators } from '@angular/forms';\nimport { doc, getDoc, updateDoc } from '@angular/fire/firestore';\nimport { getFirestore } from 'firebase/firestore';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../services/user.service\";\nimport * as i4 from \"@angular/fire/firestore\";\nimport * as i5 from \"@angular/router\";\nlet PerfilPage = /*#__PURE__*/(() => {\n  var _PerfilPage;\n  class PerfilPage {\n    constructor(navCtrl, formBuilder, userService, firestore, router) {\n      this.navCtrl = navCtrl;\n      this.formBuilder = formBuilder;\n      this.userService = userService;\n      this.firestore = firestore;\n      this.router = router;\n      this.imageSource = null;\n      this.formData = []; // Arreglo para almacenar los datos del formulario\n      //userdata\n      this.userData = {\n        name: \"\",\n        email: \"\",\n        lastname: \"\",\n        phone: \"\",\n        password: \"\"\n      };\n      this.ProfilePic = \"\";\n      this.finishedLoading = false;\n      this.myForm = this.formBuilder.group({\n        name: ['', Validators.required],\n        email: ['', [Validators.required]],\n        // password: ['', [Validators.required, Validators.minLength(8), Validators.pattern(/^(?=.[a-z])(?=.[A-Z]).{8,}$/)]],\n        lastname: ['', Validators.required],\n        phone: ['', Validators.required],\n        password: ['', [Validators.required, Validators.minLength(8), Validators.pattern(/^(?=.[a-z])(?=.[A-Z]).{8,}$/)]]\n      });\n    }\n    ngOnInit() {\n      this.getUserData();\n      // this.userID = this.userService.getUser();\n    }\n\n    goBack() {\n      this.navCtrl.back();\n    }\n    displayImage(event) {\n      const input = event.target;\n      if (input.files && input.files[0]) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          if (typeof reader.result === 'string') {\n            this.imageSource = reader.result;\n          }\n        };\n        console.log(input.files[0]);\n        reader.readAsDataURL(input.files[0]);\n        this.userService.saveProfilePic(input.files[0]);\n        this.ProfilePic = input.files[0].name;\n        updateDoc(this.userDoc, {\n          ProfilePic: \"images\" + this.ProfilePic\n        }), error => {\n          console.log(error);\n        };\n      }\n    }\n    submitForm() {\n      if (this.myForm.valid) {\n        this.formData.push(this.myForm.value);\n        // Reiniciar el formulario\n        // this.myForm.reset();\n        console.log('Formulario enviado. Datos guardados:', this.formData);\n        this.updateUserData(this.myForm.value.name, this.myForm.value.phone, this.myForm.value.lastname, this.userDoc, this.userID);\n      }\n    }\n    regresar() {\n      this.router.navigate(['/tabs/tab4']);\n    }\n    cerrar() {\n      this.router.navigate(['/login']);\n    }\n    isFormValid() {\n      return this.myForm.valid;\n    }\n    getUserData() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const db = getFirestore();\n        const id = yield _this.userService.getUser();\n        // this.userService.getProfilePic(id).then((url) => {\n        //   this.imageSource = url;\n        // });\n        _this.userID = id;\n        console.log(_this.userID);\n        const docref = doc(db, 'Users', id);\n        _this.userDoc = docref;\n        console.log(docref);\n        try {\n          const docSnap = yield getDoc(docref);\n          console.log(docSnap.data());\n          const data = docSnap.data();\n          _this.userData.email = data.email;\n          _this.userData.name = data.name;\n          _this.userData.phone = data.phone;\n          _this.userData.lastname = data.lastname;\n          _this.ProfilePic = data.ProfilePic;\n        } catch (error) {\n          console.log(error);\n        }\n        _this.userService.getProfilePicURL(_this.ProfilePic).then(url => {\n          _this.imageSource = url;\n        });\n        //Usar esta variable para definir cuando quitar la barra de carga\n        _this.finishedLoading = true;\n      })();\n    }\n    updateUserData(name, phone, lastname, dbRef, id) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        _this2.userService.updateUserData(name, phone, lastname, dbRef, id).then(() => {\n          console.log(\"Datos actualizados\");\n        }).catch(error => {\n          console.log(error);\n        });\n        _this2.getUserData();\n      })();\n    }\n  }\n  _PerfilPage = PerfilPage;\n  _PerfilPage.ɵfac = function PerfilPage_Factory(t) {\n    return new (t || _PerfilPage)(i0.ɵɵdirectiveInject(i1.NavController), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.UserService), i0.ɵɵdirectiveInject(i4.Firestore), i0.ɵɵdirectiveInject(i5.Router));\n  };\n  _PerfilPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _PerfilPage,\n    selectors: [[\"app-perfil\"]],\n    decls: 0,\n    vars: 0,\n    template: function PerfilPage_Template(rf, ctx) {},\n    styles: [\"@charset \\\"UTF-8\\\";ion-buttons[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%]{color:#0c487a}.profile-container[_ngcontent-%COMP%]{text-align:center}.avatar-wrapper[_ngcontent-%COMP%]{position:relative;display:inline-block}.profile-avatar[_ngcontent-%COMP%]{width:150px;height:150px}.profile-avatar[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{border-radius:50%}.edit-icon[_ngcontent-%COMP%]{position:absolute;bottom:0;right:0;background-color:#005fa3;color:#fff;padding:5px;border-radius:50%;font-size:18px;transform:translate(10%,40%)}.profile-name[_ngcontent-%COMP%]{font-size:20px;font-weight:700;color:#000;margin-top:10px}ion-row[_ngcontent-%COMP%]{margin:0 10px}ion-avatar[_ngcontent-%COMP%]{height:150px;width:150px}ion-label[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{color:#000}h2[_ngcontent-%COMP%]{text-align:center;color:#0c487a;font-size:28px;margin-top:10px}.perfil[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%]{height:30px;width:30px}ion-button[_ngcontent-%COMP%]{color:#0c487a;font-size:20px}.titulo[_ngcontent-%COMP%]{text-align:center}ion-toolbar[_ngcontent-%COMP%]{padding:20px}ion-list[_ngcontent-%COMP%]{margin:0 10px 30px}.cerrar[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%]{color:#0c487a}ion-input[_ngcontent-%COMP%]{font-size:18px}ion-item[_ngcontent-%COMP%]{margin:5px 0 0}.cerrar[_ngcontent-%COMP%]{display:flex;justify-content:center}.cerrar[_ngcontent-%COMP%]   ion-item[_ngcontent-%COMP%]{border-color:#0c487a;border-style:solid;border-width:2px;border-radius:30px}\"]\n  });\n  return PerfilPage;\n})();\nexport { PerfilPage };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}