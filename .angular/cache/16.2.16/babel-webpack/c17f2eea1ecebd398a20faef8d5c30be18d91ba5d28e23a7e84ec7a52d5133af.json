{"ast":null,"code":"import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { AuthInstances } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { AppCheckInstances } from '@angular/fire/app-check';\nimport { fromTask as fromTask$1, percentage as percentage$1 } from 'rxfire/storage';\nimport { connectStorageEmulator as connectStorageEmulator$1, deleteObject as deleteObject$1, getBlob as getBlob$1, getBytes as getBytes$1, getDownloadURL as getDownloadURL$1, getMetadata as getMetadata$1, getStorage as getStorage$1, getStream as getStream$1, list as list$1, listAll as listAll$1, ref as ref$1, updateMetadata as updateMetadata$1, uploadBytes as uploadBytes$1, uploadBytesResumable as uploadBytesResumable$1, uploadString as uploadString$1 } from 'firebase/storage';\nexport * from 'firebase/storage';\nclass Storage {\n  constructor(auth) {\n    return auth;\n  }\n}\nconst STORAGE_PROVIDER_NAME = 'storage';\nclass StorageInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(STORAGE_PROVIDER_NAME);\n  }\n}\nconst storageInstance$ = /*#__PURE__*/ /*#__PURE__*/timer(0, 300).pipe( /*#__PURE__*/concatMap(() => from(ɵgetAllInstancesOf(STORAGE_PROVIDER_NAME))), /*#__PURE__*/distinct());\nconst PROVIDED_STORAGE_INSTANCES = /*#__PURE__*/new InjectionToken('angularfire2.storage-instances');\nfunction defaultStorageInstanceFactory(provided, defaultApp) {\n  const defaultStorage = ɵgetDefaultInstanceOf(STORAGE_PROVIDER_NAME, provided, defaultApp);\n  return defaultStorage && new Storage(defaultStorage);\n}\nfunction storageInstanceFactory(fn) {\n  return (zone, injector) => {\n    const storage = zone.runOutsideAngular(() => fn(injector));\n    return new Storage(storage);\n  };\n}\nconst STORAGE_INSTANCES_PROVIDER = {\n  provide: StorageInstances,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_STORAGE_INSTANCES]]\n};\nconst DEFAULT_STORAGE_INSTANCE_PROVIDER = {\n  provide: Storage,\n  useFactory: defaultStorageInstanceFactory,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_STORAGE_INSTANCES], FirebaseApp]\n};\nlet StorageModule = /*#__PURE__*/(() => {\n  class StorageModule {\n    constructor() {\n      registerVersion('angularfire', VERSION.full, 'gcs');\n    }\n  }\n  StorageModule.ɵfac = function StorageModule_Factory(t) {\n    return new (t || StorageModule)();\n  };\n  StorageModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: StorageModule\n  });\n  StorageModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_STORAGE_INSTANCE_PROVIDER, STORAGE_INSTANCES_PROVIDER]\n  });\n  return StorageModule;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction provideStorage(fn, ...deps) {\n  return {\n    ngModule: StorageModule,\n    providers: [{\n      provide: PROVIDED_STORAGE_INSTANCES,\n      useFactory: storageInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps,\n      // Defensively load Auth first, if provided\n      [new Optional(), AuthInstances], [new Optional(), AppCheckInstances], ...deps]\n    }]\n  };\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst fromTask = /*#__PURE__*/ɵzoneWrap(fromTask$1, true);\nconst percentage = /*#__PURE__*/ɵzoneWrap(percentage$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst connectStorageEmulator = /*#__PURE__*/ɵzoneWrap(connectStorageEmulator$1, true);\nconst deleteObject = /*#__PURE__*/ɵzoneWrap(deleteObject$1, true);\nconst getBlob = /*#__PURE__*/ɵzoneWrap(getBlob$1, true);\nconst getBytes = /*#__PURE__*/ɵzoneWrap(getBytes$1, true);\nconst getDownloadURL = /*#__PURE__*/ɵzoneWrap(getDownloadURL$1, true);\nconst getMetadata = /*#__PURE__*/ɵzoneWrap(getMetadata$1, true);\nconst getStorage = /*#__PURE__*/ɵzoneWrap(getStorage$1, true);\nconst getStream = /*#__PURE__*/ɵzoneWrap(getStream$1, true);\nconst list = /*#__PURE__*/ɵzoneWrap(list$1, true);\nconst listAll = /*#__PURE__*/ɵzoneWrap(listAll$1, true);\nconst ref = /*#__PURE__*/ɵzoneWrap(ref$1, true);\nconst updateMetadata = /*#__PURE__*/ɵzoneWrap(updateMetadata$1, true);\nconst uploadBytes = /*#__PURE__*/ɵzoneWrap(uploadBytes$1, true);\nconst uploadBytesResumable = /*#__PURE__*/ɵzoneWrap(uploadBytesResumable$1, true);\nconst uploadString = /*#__PURE__*/ɵzoneWrap(uploadString$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Storage, StorageInstances, StorageModule, connectStorageEmulator, deleteObject, fromTask, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, percentage, provideStorage, ref, storageInstance$, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n//# sourceMappingURL=angular-fire-storage.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}