{"ast":null,"code":"import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { AppCheckInstances } from '@angular/fire/app-check';\nimport { authState as authState$1, user as user$1, idToken as idToken$1 } from 'rxfire/auth';\nimport { applyActionCode as applyActionCode$1, beforeAuthStateChanged as beforeAuthStateChanged$1, checkActionCode as checkActionCode$1, confirmPasswordReset as confirmPasswordReset$1, connectAuthEmulator as connectAuthEmulator$1, createUserWithEmailAndPassword as createUserWithEmailAndPassword$1, deleteUser as deleteUser$1, fetchSignInMethodsForEmail as fetchSignInMethodsForEmail$1, getAdditionalUserInfo as getAdditionalUserInfo$1, getAuth as getAuth$1, getIdToken as getIdToken$1, getIdTokenResult as getIdTokenResult$1, getMultiFactorResolver as getMultiFactorResolver$1, getRedirectResult as getRedirectResult$1, initializeAuth as initializeAuth$1, isSignInWithEmailLink as isSignInWithEmailLink$1, linkWithCredential as linkWithCredential$1, linkWithPhoneNumber as linkWithPhoneNumber$1, linkWithPopup as linkWithPopup$1, linkWithRedirect as linkWithRedirect$1, multiFactor as multiFactor$1, onAuthStateChanged as onAuthStateChanged$1, onIdTokenChanged as onIdTokenChanged$1, parseActionCodeURL as parseActionCodeURL$1, reauthenticateWithCredential as reauthenticateWithCredential$1, reauthenticateWithPhoneNumber as reauthenticateWithPhoneNumber$1, reauthenticateWithPopup as reauthenticateWithPopup$1, reauthenticateWithRedirect as reauthenticateWithRedirect$1, reload as reload$1, sendEmailVerification as sendEmailVerification$1, sendPasswordResetEmail as sendPasswordResetEmail$1, sendSignInLinkToEmail as sendSignInLinkToEmail$1, setPersistence as setPersistence$1, signInAnonymously as signInAnonymously$1, signInWithCredential as signInWithCredential$1, signInWithCustomToken as signInWithCustomToken$1, signInWithEmailAndPassword as signInWithEmailAndPassword$1, signInWithEmailLink as signInWithEmailLink$1, signInWithPhoneNumber as signInWithPhoneNumber$1, signInWithPopup as signInWithPopup$1, signInWithRedirect as signInWithRedirect$1, signOut as signOut$1, unlink as unlink$1, updateCurrentUser as updateCurrentUser$1, updateEmail as updateEmail$1, updatePassword as updatePassword$1, updatePhoneNumber as updatePhoneNumber$1, updateProfile as updateProfile$1, useDeviceLanguage as useDeviceLanguage$1, verifyBeforeUpdateEmail as verifyBeforeUpdateEmail$1, verifyPasswordResetCode as verifyPasswordResetCode$1 } from 'firebase/auth';\nexport * from 'firebase/auth';\nconst AUTH_PROVIDER_NAME = 'auth';\nclass Auth {\n  constructor(auth) {\n    return auth;\n  }\n}\nclass AuthInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(AUTH_PROVIDER_NAME);\n  }\n}\nconst authInstance$ = /*#__PURE__*/ /*#__PURE__*/timer(0, 300).pipe( /*#__PURE__*/concatMap(() => from(ɵgetAllInstancesOf(AUTH_PROVIDER_NAME))), /*#__PURE__*/distinct());\nconst PROVIDED_AUTH_INSTANCES = /*#__PURE__*/new InjectionToken('angularfire2.auth-instances');\nfunction defaultAuthInstanceFactory(provided, defaultApp) {\n  const defaultAuth = ɵgetDefaultInstanceOf(AUTH_PROVIDER_NAME, provided, defaultApp);\n  return defaultAuth && new Auth(defaultAuth);\n}\nfunction authInstanceFactory(fn) {\n  return (zone, injector) => {\n    const auth = zone.runOutsideAngular(() => fn(injector));\n    return new Auth(auth);\n  };\n}\nconst AUTH_INSTANCES_PROVIDER = {\n  provide: AuthInstances,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_AUTH_INSTANCES]]\n};\nconst DEFAULT_AUTH_INSTANCE_PROVIDER = {\n  provide: Auth,\n  useFactory: defaultAuthInstanceFactory,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_AUTH_INSTANCES], FirebaseApp]\n};\nlet AuthModule = /*#__PURE__*/(() => {\n  class AuthModule {\n    constructor() {\n      registerVersion('angularfire', VERSION.full, 'auth');\n    }\n  }\n  AuthModule.ɵfac = function AuthModule_Factory(t) {\n    return new (t || AuthModule)();\n  };\n  AuthModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AuthModule\n  });\n  AuthModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_AUTH_INSTANCE_PROVIDER, AUTH_INSTANCES_PROVIDER]\n  });\n  return AuthModule;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction provideAuth(fn, ...deps) {\n  return {\n    ngModule: AuthModule,\n    providers: [{\n      provide: PROVIDED_AUTH_INSTANCES,\n      useFactory: authInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps, [new Optional(), AppCheckInstances], ...deps]\n    }]\n  };\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst authState = /*#__PURE__*/ɵzoneWrap(authState$1, true);\nconst user = /*#__PURE__*/ɵzoneWrap(user$1, true);\nconst idToken = /*#__PURE__*/ɵzoneWrap(idToken$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst applyActionCode = /*#__PURE__*/ɵzoneWrap(applyActionCode$1, true);\nconst beforeAuthStateChanged = /*#__PURE__*/ɵzoneWrap(beforeAuthStateChanged$1, true);\nconst checkActionCode = /*#__PURE__*/ɵzoneWrap(checkActionCode$1, true);\nconst confirmPasswordReset = /*#__PURE__*/ɵzoneWrap(confirmPasswordReset$1, true);\nconst connectAuthEmulator = /*#__PURE__*/ɵzoneWrap(connectAuthEmulator$1, true);\nconst createUserWithEmailAndPassword = /*#__PURE__*/ɵzoneWrap(createUserWithEmailAndPassword$1, true);\nconst deleteUser = /*#__PURE__*/ɵzoneWrap(deleteUser$1, true);\nconst fetchSignInMethodsForEmail = /*#__PURE__*/ɵzoneWrap(fetchSignInMethodsForEmail$1, true);\nconst getAdditionalUserInfo = /*#__PURE__*/ɵzoneWrap(getAdditionalUserInfo$1, true);\nconst getAuth = /*#__PURE__*/ɵzoneWrap(getAuth$1, true);\nconst getIdToken = /*#__PURE__*/ɵzoneWrap(getIdToken$1, true);\nconst getIdTokenResult = /*#__PURE__*/ɵzoneWrap(getIdTokenResult$1, true);\nconst getMultiFactorResolver = /*#__PURE__*/ɵzoneWrap(getMultiFactorResolver$1, true);\nconst getRedirectResult = /*#__PURE__*/ɵzoneWrap(getRedirectResult$1, true);\nconst initializeAuth = /*#__PURE__*/ɵzoneWrap(initializeAuth$1, true);\nconst isSignInWithEmailLink = /*#__PURE__*/ɵzoneWrap(isSignInWithEmailLink$1, true);\nconst linkWithCredential = /*#__PURE__*/ɵzoneWrap(linkWithCredential$1, true);\nconst linkWithPhoneNumber = /*#__PURE__*/ɵzoneWrap(linkWithPhoneNumber$1, true);\nconst linkWithPopup = /*#__PURE__*/ɵzoneWrap(linkWithPopup$1, true);\nconst linkWithRedirect = /*#__PURE__*/ɵzoneWrap(linkWithRedirect$1, true);\nconst multiFactor = /*#__PURE__*/ɵzoneWrap(multiFactor$1, true);\nconst onAuthStateChanged = /*#__PURE__*/ɵzoneWrap(onAuthStateChanged$1, true);\nconst onIdTokenChanged = /*#__PURE__*/ɵzoneWrap(onIdTokenChanged$1, true);\nconst parseActionCodeURL = /*#__PURE__*/ɵzoneWrap(parseActionCodeURL$1, true);\nconst reauthenticateWithCredential = /*#__PURE__*/ɵzoneWrap(reauthenticateWithCredential$1, true);\nconst reauthenticateWithPhoneNumber = /*#__PURE__*/ɵzoneWrap(reauthenticateWithPhoneNumber$1, true);\nconst reauthenticateWithPopup = /*#__PURE__*/ɵzoneWrap(reauthenticateWithPopup$1, true);\nconst reauthenticateWithRedirect = /*#__PURE__*/ɵzoneWrap(reauthenticateWithRedirect$1, true);\nconst reload = /*#__PURE__*/ɵzoneWrap(reload$1, true);\nconst sendEmailVerification = /*#__PURE__*/ɵzoneWrap(sendEmailVerification$1, true);\nconst sendPasswordResetEmail = /*#__PURE__*/ɵzoneWrap(sendPasswordResetEmail$1, true);\nconst sendSignInLinkToEmail = /*#__PURE__*/ɵzoneWrap(sendSignInLinkToEmail$1, true);\nconst setPersistence = /*#__PURE__*/ɵzoneWrap(setPersistence$1, true);\nconst signInAnonymously = /*#__PURE__*/ɵzoneWrap(signInAnonymously$1, true);\nconst signInWithCredential = /*#__PURE__*/ɵzoneWrap(signInWithCredential$1, true);\nconst signInWithCustomToken = /*#__PURE__*/ɵzoneWrap(signInWithCustomToken$1, true);\nconst signInWithEmailAndPassword = /*#__PURE__*/ɵzoneWrap(signInWithEmailAndPassword$1, true);\nconst signInWithEmailLink = /*#__PURE__*/ɵzoneWrap(signInWithEmailLink$1, true);\nconst signInWithPhoneNumber = /*#__PURE__*/ɵzoneWrap(signInWithPhoneNumber$1, true);\nconst signInWithPopup = /*#__PURE__*/ɵzoneWrap(signInWithPopup$1, true);\nconst signInWithRedirect = /*#__PURE__*/ɵzoneWrap(signInWithRedirect$1, true);\nconst signOut = /*#__PURE__*/ɵzoneWrap(signOut$1, true);\nconst unlink = /*#__PURE__*/ɵzoneWrap(unlink$1, true);\nconst updateCurrentUser = /*#__PURE__*/ɵzoneWrap(updateCurrentUser$1, true);\nconst updateEmail = /*#__PURE__*/ɵzoneWrap(updateEmail$1, true);\nconst updatePassword = /*#__PURE__*/ɵzoneWrap(updatePassword$1, true);\nconst updatePhoneNumber = /*#__PURE__*/ɵzoneWrap(updatePhoneNumber$1, true);\nconst updateProfile = /*#__PURE__*/ɵzoneWrap(updateProfile$1, true);\nconst useDeviceLanguage = /*#__PURE__*/ɵzoneWrap(useDeviceLanguage$1, true);\nconst verifyBeforeUpdateEmail = /*#__PURE__*/ɵzoneWrap(verifyBeforeUpdateEmail$1, true);\nconst verifyPasswordResetCode = /*#__PURE__*/ɵzoneWrap(verifyPasswordResetCode$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Auth, AuthInstances, AuthModule, applyActionCode, authInstance$, authState, beforeAuthStateChanged, checkActionCode, confirmPasswordReset, connectAuthEmulator, createUserWithEmailAndPassword, deleteUser, fetchSignInMethodsForEmail, getAdditionalUserInfo, getAuth, getIdToken, getIdTokenResult, getMultiFactorResolver, getRedirectResult, idToken, initializeAuth, isSignInWithEmailLink, linkWithCredential, linkWithPhoneNumber, linkWithPopup, linkWithRedirect, multiFactor, onAuthStateChanged, onIdTokenChanged, parseActionCodeURL, provideAuth, reauthenticateWithCredential, reauthenticateWithPhoneNumber, reauthenticateWithPopup, reauthenticateWithRedirect, reload, sendEmailVerification, sendPasswordResetEmail, sendSignInLinkToEmail, setPersistence, signInAnonymously, signInWithCredential, signInWithCustomToken, signInWithEmailAndPassword, signInWithEmailLink, signInWithPhoneNumber, signInWithPopup, signInWithRedirect, signOut, unlink, updateCurrentUser, updateEmail, updatePassword, updatePhoneNumber, updateProfile, useDeviceLanguage, user, verifyBeforeUpdateEmail, verifyPasswordResetCode };\n//# sourceMappingURL=angular-fire-auth.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}