{"ast":null,"code":"import _asyncToGenerator from \"c:/Users/benji/OneDrive/Documents/smartmeds project/smart-meds-ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { WebPlugin } from '@capacitor/core';\nexport class ClipboardWeb extends WebPlugin {\n  write(options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (typeof navigator === 'undefined' || !navigator.clipboard) {\n        throw _this.unavailable('Clipboard API not available in this browser');\n      }\n      if (options.string !== undefined) {\n        yield _this.writeText(options.string);\n      } else if (options.url) {\n        yield _this.writeText(options.url);\n      } else if (options.image) {\n        if (typeof ClipboardItem !== 'undefined') {\n          try {\n            const blob = yield (yield fetch(options.image)).blob();\n            const clipboardItemInput = new ClipboardItem({\n              [blob.type]: blob\n            });\n            yield navigator.clipboard.write([clipboardItemInput]);\n          } catch (err) {\n            throw new Error('Failed to write image');\n          }\n        } else {\n          throw _this.unavailable('Writing images to the clipboard is not supported in this browser');\n        }\n      } else {\n        throw new Error('Nothing to write');\n      }\n    })();\n  }\n  read() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (typeof navigator === 'undefined' || !navigator.clipboard) {\n        throw _this2.unavailable('Clipboard API not available in this browser');\n      }\n      if (typeof ClipboardItem !== 'undefined') {\n        try {\n          const clipboardItems = yield navigator.clipboard.read();\n          const type = clipboardItems[0].types[0];\n          const clipboardBlob = yield clipboardItems[0].getType(type);\n          const data = yield _this2._getBlobData(clipboardBlob, type);\n          return {\n            value: data,\n            type\n          };\n        } catch (err) {\n          return _this2.readText();\n        }\n      } else {\n        return _this2.readText();\n      }\n    })();\n  }\n  readText() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (typeof navigator === 'undefined' || !navigator.clipboard || !navigator.clipboard.readText) {\n        throw _this3.unavailable('Reading from clipboard not supported in this browser');\n      }\n      const text = yield navigator.clipboard.readText();\n      return {\n        value: text,\n        type: 'text/plain'\n      };\n    })();\n  }\n  writeText(text) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (typeof navigator === 'undefined' || !navigator.clipboard || !navigator.clipboard.writeText) {\n        throw _this4.unavailable('Writting to clipboard not supported in this browser');\n      }\n      yield navigator.clipboard.writeText(text);\n    })();\n  }\n  _getBlobData(clipboardBlob, type) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      if (type.includes('image')) {\n        reader.readAsDataURL(clipboardBlob);\n      } else {\n        reader.readAsText(clipboardBlob);\n      }\n      reader.onloadend = () => {\n        const r = reader.result;\n        resolve(r);\n      };\n      reader.onerror = e => {\n        reject(e);\n      };\n    });\n  }\n}\n//# sourceMappingURL=web.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}