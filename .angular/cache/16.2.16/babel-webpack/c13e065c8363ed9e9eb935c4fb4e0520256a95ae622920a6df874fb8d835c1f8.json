{"ast":null,"code":"import _asyncToGenerator from \"c:/Users/benji/OneDrive/Documents/smartmeds project/smart-meds-ionic/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword } from '@angular/fire/auth';\nimport { collection, query, where, getDocs, updateDoc, getFirestore } from '@angular/fire/firestore';\nimport { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { Preferences } from '@capacitor/preferences';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/auth\";\nimport * as i2 from \"@angular/fire/firestore\";\nlet UserService = /*#__PURE__*/(() => {\n  var _UserService;\n  class UserService {\n    constructor(auth, firestore) {\n      this.auth = auth;\n      this.firestore = firestore;\n      this.UserId = '';\n    }\n    register({\n      email,\n      password\n    }) {\n      return createUserWithEmailAndPassword(this.auth, email, password);\n    }\n    // async addUser({ Apellido, Nombre, Phone, id }: any) {\n    //   const dbref = collection(this.firestore, 'Users');\n    //   const PicRoute = \"\";\n    //   this.store(email);\n    //   return addDoc(dbref, { Apellido, Nombre, Phone, email, id, PicRoute});\n    // }\n    login({\n      email,\n      password\n    }) {\n      return signInWithEmailAndPassword(this.auth, email, password);\n    }\n    store(email) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const db = collection(_this.firestore, 'Users');\n        const q = query(db, where(\"email\", \"==\", email));\n        const querySnapshot = yield getDocs(q);\n        querySnapshot.forEach(doc => {\n          _this.UserId = doc.id;\n        });\n        yield Preferences.set({\n          key: 'userId',\n          value: _this.UserId\n        });\n      })();\n    }\n    getUser() {\n      return _asyncToGenerator(function* () {\n        const user = yield Preferences.get({\n          key: 'userId'\n        });\n        let data = '';\n        if (user.value == null) {\n          data = user.value;\n        } else {\n          data = user.value;\n        }\n        return data;\n      })();\n    }\n    saveProfilePic(file) {\n      return _asyncToGenerator(function* () {\n        const storage = getStorage();\n        const storageRef = ref(storage, \"images\" + file.name);\n        uploadBytes(storageRef, file).then(snapshot => {}, error => {\n          console.log(error);\n        });\n      })();\n    }\n    getProfilePicURL(picUrl) {\n      return _asyncToGenerator(function* () {\n        const url = yield getDownloadURL(ref(getStorage(), picUrl));\n        return url;\n      })();\n    }\n    updateUserData(Apellido, Nombre, Phone, id, docref) {\n      return _asyncToGenerator(function* () {\n        const db = getFirestore();\n        const data = {\n          phone: Phone,\n          name: Nombre,\n          lastname: Apellido\n        };\n        updateDoc(docref, data);\n      })();\n    }\n  }\n  _UserService = UserService;\n  _UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || _UserService)(i0.ɵɵinject(i1.Auth), i0.ɵɵinject(i2.Firestore));\n  };\n  _UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _UserService,\n    factory: _UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();\nexport { UserService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}